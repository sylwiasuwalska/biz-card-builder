{"version":3,"sources":["components/Reducer.js","components/Store.js","components/RadioList.js","components/Card.js","components/UserForm.js","components/AppHeader.js","components/AppFooter.js","components/App.js","serviceWorker.js","index.js"],"names":["Reducer","state","action","type","name","value","profession","email","telephone","address","initialState","Context","createContext","Store","children","useReducer","dispatch","Provider","RadioList","props","Form","onSubmit","handleFormSubmit","title","className","value1","onChange","handleChange","defaultChecked","label1","value2","label2","value3","label3","Card","useContext","globalState","useState","alignState","alignSet","fontState","fontSet","backgroundState","backgroundSet","formSubmitEvent","preventDefault","Container","Row","Col","changeEvent","target","handleFromSubmit","UserForm","nameRef","useRef","professionRef","emailRef","telephoneRef","addressRef","caseName","refID","current","event","Label","Control","size","ref","AppHeader","AppFooter","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b89690cf.chunk.js","sourcesContent":["const Reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'SET_NAME':\r\n            return {\r\n                ...state,\r\n                name: action.value\r\n            };\r\n        case 'SET_PROFESSION':\r\n            return {\r\n                ...state,\r\n                profession: action.value\r\n            };\r\n        case 'SET_EMAIL':\r\n            return {\r\n                ...state,\r\n                email: action.value\r\n            };\r\n        case 'SET_TELEPHONE':\r\n            return {\r\n                ...state,\r\n                telephone: action.value\r\n            };\r\n        case 'SET_ADDRESS':\r\n            return {\r\n                ...state,\r\n                address: action.value\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default Reducer;","import React, {createContext, useReducer} from \"react\";\nimport Reducer from \"./Reducer\";\n\nconst initialState = {\n    name: \"Wojciech Kłos\",\n    profession: \"IT manager\",\n    email: \"wojciech@wojciechklos.com\",\n    telephone: \"+48-607-901-805\",\n    address: \"Świętego Spokoju 7, Brzeziny\",\n};\n\nconst Store = ({children}) => {\n    const [state, dispatch] = useReducer(Reducer, initialState);\n    return (\n        <Context.Provider value={[state, dispatch]}>{children}</Context.Provider>\n    );\n};\n\nexport const Context = createContext(initialState);\nexport default Store;\n","import React from \"react\";\nimport {Form} from \"react-bootstrap\";\n\nfunction RadioList(props) {\n    return (\n        <Form onSubmit={props.handleFormSubmit}>\n            <h4>{props.title}</h4>\n            <div className=\"form-check\">\n                <label>\n                    <input\n                        type=\"radio\"\n                        name={props.name}\n                        value={props.value1}\n                        onChange={props.handleChange}\n                        className=\"form-check-input\"\n                        defaultChecked\n                    />\n                    {props.label1}\n                </label>\n            </div>\n\n            <div className=\"form-check\">\n                <label>\n                    <input\n                        type=\"radio\"\n                        name={props.name}\n                        value={props.value2}\n                        onChange={props.handleChange}\n                        className=\"form-check-input\"\n                    />\n                    {props.label2}\n                </label>\n            </div>\n\n            <div className=\"form-check\">\n                <label>\n                    <input\n                        type=\"radio\"\n                        name={props.name}\n                        value={props.value3}\n                        onChange={props.handleChange}\n                        className=\"form-check-input\"\n                    />\n                    {props.label3}\n                </label>\n            </div>\n        </Form>\n    );\n}\n\nexport default RadioList;\n","import React, {useContext, useState} from \"react\";\nimport {Context} from \"./Store\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport \"../Card.css\";\nimport RadioList from \"./RadioList\";\n\nfunction Card(props) {\n    const [globalState, dispatch] = useContext(Context);\n    const [alignState, alignSet] = useState(\"layout-left\");\n    const [fontState, fontSet] = useState(\"font1\");\n    const [backgroundState, backgroundSet] = useState(\"background1\");\n\n    const handleAlignChange = (changeEvent) => {\n        alignSet(changeEvent.target.value);\n    };\n\n    const handleFontChange = (changeEvent) => {\n        fontSet(changeEvent.target.value);\n    };\n\n    const handleBackgroundChange = (changeEvent) => {\n        backgroundSet(changeEvent.target.value);\n    };\n\n    const handleFormSubmit = (formSubmitEvent) => {\n        formSubmitEvent.preventDefault();\n    };\n\n    return (\n        <Container className=\"cardContainer\">\n            <Row>\n\n                <div className={`box card layout ${backgroundState} ${fontState} ${alignState}`}>\n                    <h3 className=\"name\">{globalState.name}</h3>\n                    <p className=\"profession\">{globalState.profession}</p>\n                    <p className=\"email\">e-mail: {globalState.email}</p>\n                    <p className=\"telephone\">mobile: {globalState.telephone}</p>\n                    <p className=\"address\">addres: {globalState.address}</p>\n                </div>\n\n            </Row>\n            <Row className=\"contentChanger\">\n                <Col>\n                    <RadioList\n                        title={\"Align content:\"}\n                        handleChange={handleAlignChange}\n                        handleFromSubmit={handleFormSubmit}\n                        name={\"layout\"}\n                        value1={\"layout-left\"}\n                        label1={\"Left\"}\n                        value2={\"layout-center\"}\n                        label2={\"Center\"}\n                        value3={\"layout-right\"}\n                        label3={\"Right\"}\n                    />\n                </Col>\n                <Col>\n                    <RadioList\n                        title={\"Choose font:\"}\n                        handleChange={handleFontChange}\n                        handleFromSubmit={handleFormSubmit}\n                        name={\"font\"}\n                        value1={\"font1\"}\n                        label1={\"Roboto\"}\n                        value2={\"font2\"}\n                        label2={\"Ubuntu\"}\n                        value3={\"font3\"}\n                        label3={\"Raleway\"}\n                    />\n                </Col>\n                <Col>\n                    <RadioList\n                        title={\"Choose background:\"}\n                        handleChange={handleBackgroundChange}\n                        handleFromSubmit={handleFormSubmit}\n                        name={\"background\"}\n                        value1={\"background1\"}\n                        label1={\"Background 1\"}\n                        value2={\"background2\"}\n                        label2={\"Background 2\"}\n                        value3={\"background3\"}\n                        label3={\"Background 3\"}\n                    />\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default Card;\n","import React, {useContext, useRef} from 'react';\r\nimport {Col, Container, Form, Row} from 'react-bootstrap';\r\nimport {Context} from './Store'\r\n\r\nfunction UserForm(props) {\r\n\r\n    const [state, dispatch] = useContext(Context);\r\n\r\n    const nameRef = useRef(null);\r\n    const professionRef = useRef(null)\r\n    const emailRef = useRef(null);\r\n    const telephoneRef = useRef(null);\r\n    const addressRef = useRef(null);\r\n\r\n    const handleChange = (caseName, refID) => {\r\n        dispatch({type: caseName, value: refID.current.value})\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <Container className=\"userForm\">\r\n            <Form onSubmit={handleSubmit}  >\r\n                <Form.Row>\r\n                    <Col>\r\n                        <Form.Label>First and last name: </Form.Label>\r\n                        <Form.Control size=\"sm\" type=\"name\" ref={nameRef}\r\n                                      onChange={() => {\r\n                                          handleChange('SET_NAME', nameRef)\r\n                                      }}/>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Label>Profession: </Form.Label>\r\n                        <Form.Control size=\"sm\" type=\"name\" ref={professionRef}\r\n                                      onChange={() => {\r\n                                          handleChange('SET_PROFESSION', professionRef)\r\n                                      }}/>\r\n                    </Col>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Col>\r\n                        <Form.Label>E-mail address:</Form.Label>\r\n                        <Form.Control size=\"sm\" type=\"email\" ref={emailRef} onChange={() => {\r\n                            handleChange('SET_EMAIL', emailRef)\r\n                        }}/>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Label>Telephone:</Form.Label>\r\n                        <Form.Control size=\"sm\" type=\"Telephone\" ref={telephoneRef} onChange={() => {\r\n                            handleChange('SET_TELEPHONE', telephoneRef)\r\n                        }}/>\r\n                    </Col>\r\n                </Form.Row>\r\n                <Form.Label>Address:</Form.Label>\r\n                <Form.Control size=\"sm\" type=\"address\" ref={addressRef} onChange={() => {\r\n                    handleChange('SET_ADDRESS', addressRef)\r\n                }}/>\r\n            </Form>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default UserForm;","import React from 'react';\r\n\r\nfunction AppHeader(props) {\r\n    return (\r\n        <header>\r\n            <h1>Business Card Builder</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default AppHeader;","import React from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\n\nfunction AppFooter(props) {\n  return (\n    <footer>\n      <Container>Project made to learn React Hooks. @2020</Container>\n    </footer>\n  );\n}\n\nexport default AppFooter;\n","import React from \"react\";\nimport Store from \"./Store\";\nimport Card from \"./Card\";\nimport UserForm from \"./UserForm\";\nimport AppHeader from \"./AppHeader\";\nimport AppFooter from \"./AppFooter\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Store>\n        <AppHeader />\n        <UserForm />\n        <Card />\n        <AppFooter />\n      </Store>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}