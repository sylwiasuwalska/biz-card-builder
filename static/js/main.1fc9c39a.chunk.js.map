{"version":3,"sources":["components/Reducer.js","components/Store.js","components/Card.js","components/UserForm.js","components/HeaderApp.js","components/App.js","serviceWorker.js","index.js"],"names":["Reducer","state","action","type","name","value","email","telephone","address","initialState","position","Context","createContext","Store","children","useReducer","dispatch","Provider","Card","props","useContext","Container","className","UserForm","nameRef","useRef","positionRef","emailRef","telephoneRef","addressRef","handleChange","caseName","refID","current","Form","onSubmit","event","preventDefault","Row","Col","Label","Control","size","ref","onChange","HeaderApp","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1fc9c39a.chunk.js","sourcesContent":["const Reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'SET_NAME':\r\n            return {\r\n                ...state,\r\n                name: action.value\r\n            };\r\n        case 'SET_POSITION':\r\n            return {\r\n                ...state,\r\n                name: action.value\r\n            };\r\n        case 'SET_EMAIL':\r\n            return {\r\n                ...state,\r\n                email: action.value\r\n            };\r\n        case 'SET_TELEPHONE':\r\n            return {\r\n                ...state,\r\n                telephone: action.value\r\n            };\r\n        case 'SET_ADDRESS':\r\n            return {\r\n                ...state,\r\n                address: action.value\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default Reducer;","import React, {createContext, useReducer} from \"react\";\r\nimport Reducer from './Reducer'\r\n\r\n\r\nconst initialState = {\r\n    name: \"Sylwia Suwalska\",\r\n    position: \"frontend developer\",\r\n    email: \"sylwia@sylwia.com\",\r\n    telephone: \"607-901-805\",\r\n    address: \"Świętego Spokoju 7, Nepal\"\r\n};\r\n\r\nconst Store = ({children}) => {\r\n    const [state, dispatch] = useReducer(Reducer, initialState);\r\n    return (\r\n        <Context.Provider value={[state, dispatch]}>\r\n            {children}\r\n        </Context.Provider>\r\n    )\r\n};\r\n\r\nexport const Context = createContext(initialState);\r\nexport default Store;","import React, {useContext,} from 'react';\r\nimport {Context} from \"./Store\";\r\nimport {Container} from \"react-bootstrap\";\r\nimport '../Card.css';\r\n\r\nfunction Card(props) {\r\n\r\n    const [state, dispatch] = useContext(Context);\r\n    return (\r\n        <Container className=\"cardContainer\">\r\n\r\n            <div className=\"box card\">\r\n                <div className=\"layout-center\">\r\n                    <h3 className=\"name\">{state.name}</h3>\r\n                    <p className=\"position\">{state.position}</p>\r\n                    <p className=\"email\">e-mail: {state.email}</p>\r\n                    <p className=\"telephone\">mobile: {state.telephone}</p>\r\n                    <p className=\"address\">addres: {state.address}</p>\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Card;","import React, {useContext, useRef} from 'react';\r\nimport {Col, Container, Form, Row} from 'react-bootstrap';\r\nimport {Context} from './Store'\r\n\r\nfunction UserForm(props) {\r\n\r\n    const [state, dispatch] = useContext(Context);\r\n\r\n    const nameRef = useRef(null);\r\n    const positionRef = useRef(null)\r\n    const emailRef = useRef(null);\r\n    const telephoneRef = useRef(null);\r\n    const addressRef = useRef(null);\r\n\r\n    const handleChange = (caseName, refID) => {\r\n        dispatch({type: caseName, value: refID.current.value})\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Form onSubmit={handleSubmit}  >\r\n                <Form.Row>\r\n                    <Col>\r\n                        <Form.Label>Name: </Form.Label>\r\n                        <Form.Control size=\"sm\" type=\"name\" ref={nameRef}\r\n                                      onChange={() => {\r\n                                          handleChange('SET_FIRST_NAME', nameRef)\r\n                                      }}/>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Label>Position: </Form.Label>\r\n                        <Form.Control size=\"sm\" type=\"name\" ref={positionRef}\r\n                                      onChange={() => {\r\n                                          handleChange('SET_POSITION', positionRef)\r\n                                      }}/>\r\n                    </Col>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Col>\r\n                        <Form.Label>E-mail address:</Form.Label>\r\n                        <Form.Control size=\"sm\" type=\"email\" ref={emailRef} onChange={() => {\r\n                            handleChange('SET_EMAIL', emailRef)\r\n                        }}/>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Label>Telephone:</Form.Label>\r\n                        <Form.Control size=\"sm\" type=\"Telephone\" ref={telephoneRef} onChange={() => {\r\n                            handleChange('SET_TELEPHONE', telephoneRef)\r\n                        }}/>\r\n                    </Col>\r\n                </Form.Row>\r\n                <Form.Label>Address:</Form.Label>\r\n                <Form.Control size=\"sm\" type=\"address\" ref={addressRef} onChange={() => {\r\n                    handleChange('SET_ADDRESS', addressRef)\r\n                }}/>\r\n            </Form>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default UserForm;","import React from 'react';\r\n\r\nfunction HeaderApp(props) {\r\n    return (\r\n        <div className=\"headerApp\">\r\n            <h1>Bussiness Card Builder</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeaderApp;","import React from 'react';\nimport Store from './Store'\nimport Card from \"./Card\";\nimport UserForm from \"./UserForm\";\nimport HeaderApp from \"./HeaderApp\";\n\n\n\nclass App extends React.Component {\n\n\n    render() {\n        return (\n\n            <Store>\n                <HeaderApp/>\n                <UserForm/>\n                <Card/>\n            </Store>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}